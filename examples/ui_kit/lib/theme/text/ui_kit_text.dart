import 'dart:ui' as ui show FontFeature, FontVariation, Shadow, TextLeadingDistribution;

import 'package:flutter/material.dart';
import 'package:ui_kit/ui_kit.dart';

class UiKitText extends Text {
  const UiKitText(super.data, {super.key});

  UiKitText.displayLarge(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.displayLarge(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.displayMedium(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.displayMedium(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.displaySmall(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.displaySmall(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.headlineLarge(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.headlineLarge(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.headlineMedium(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.headlineMedium(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.headlineSmall(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.headlineSmall(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.titleLarge(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.titleLarge(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.titleMedium(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.titleMedium(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.titleSmall(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.titleSmall(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.labelLarge(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.labelLarge(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.labelMedium(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.labelMedium(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.labelSmall(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.labelSmall(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.bodyLarge(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.bodyLarge(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.bodyMedium(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.bodyMedium(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );

  UiKitText.bodySmall(
    BuildContext context,
    super.data, {
    super.key,
    Color? color,
    FontStyle? fontStyle,
    double? lineHeight,
    super.maxLines,
    super.overflow,
    super.locale,
    super.selectionColor,
    super.semanticsLabel,
    super.softWrap,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textHeightBehavior,
    double? textScaleFactor,
    super.textWidthBasis,
    UiKitFontWeight? fontWeight,
    UiKitFontFamily? fontFamily,
    bool? inherit,
    Color? backgroundColor,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    ui.TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    List<ui.FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
  }) : super(
          style: UiKitTextStyle.bodySmall(
            context,
            color: color,
            fontStyle: fontStyle,
            lineHeight: lineHeight,
            fontWeight: fontWeight,
            fontFamily: fontFamily,
            inherit: inherit,
            backgroundColor: backgroundColor,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            leadingDistribution: leadingDistribution,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            fontVariations: fontVariations,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            locale: locale,
            overflow: overflow,
          ),
          textScaler: textScaleFactor != null ? TextScaler.linear(textScaleFactor) : null,
        );
}
